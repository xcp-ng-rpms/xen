XenServer changes to Xen command line default options.

* fatal nmis even in regular builds.  dom0 is not generally capable of dealing
  with nmis it gets, causing serious errors to be obscured.

* forceful watchdog by default.  Should allow IPMI "inject NMI" options on
  Dell/IBM/SuperMicro servers to work in combination with the watchdog.

* disable APICv.  Temporary until we can debug why it causes loss of VM
  interrupts when migrating between APICv and non APICv-capable hardware.

* Console timestamps (Linux style)

* Console ring size bumped up to 64k, as well as dom0 tools like
  libxl, and the ocaml and python bindings.

* Assume UC mappings for unknown EFI cacheability (firmware workarounds)

* Always probe for RTC if the the ACPI tables claim it isn't present.  HP Gen9
  servers erroneously claim that an RTC is not present, which breaks legacy
  boot.

* Increase default number of guest PIRQs. Bring the default number of PIRQs
  from 32 to 64.

* Allow dom0 to create cached mappings of reserved regions.

* Disallow PV linear pagetables by default.

* XSA-304: fast by default, allow executable superpages.

* Always scrub domheap pages.  Don't rely on guests getting this right.

diff --git a/tools/libs/light/libxl_console.c b/tools/libs/light/libxl_console.c
index 9f736b891335..f19b94bd9864 100644
--- a/tools/libs/light/libxl_console.c
+++ b/tools/libs/light/libxl_console.c
@@ -777,10 +777,10 @@ libxl_xen_console_reader *
     /*
      * We want xen to fill the buffer in as few hypercalls as
      * possible, but xen will not nul-terminate it.  The default size
-     * of Xen's console buffer is 16384.  Leave one byte at the end
+     * of Xen's console buffer is 65536.  Leave one byte at the end
      * for the null character.
      */
-    unsigned int size = 16384 + 1;
+    unsigned int size = 65536 + 1;
 
     cr = libxl__zalloc(NOGC, sizeof(libxl_xen_console_reader));
     cr->buffer = libxl__zalloc(NOGC, size);
diff --git a/tools/ocaml/libs/xc/xenctrl_stubs.c b/tools/ocaml/libs/xc/xenctrl_stubs.c
index 7d188bc8f3fb..1d8ef6c68133 100644
--- a/tools/ocaml/libs/xc/xenctrl_stubs.c
+++ b/tools/ocaml/libs/xc/xenctrl_stubs.c
@@ -743,7 +743,7 @@ CAMLprim value stub_xc_evtchn_status(value xch_val, value domid, value port)
 CAMLprim value stub_xc_readconsolering(value xch_val)
 {
 	/* Safe to use outside of blocking sections because of Ocaml GC lock. */
-	static unsigned int conring_size = 16384 + 1;
+	static unsigned int conring_size = 65536 + 1;
 
 	unsigned int count = conring_size, size = count, index = 0;
 	char *str = NULL, *ptr;
diff --git a/tools/python/xen/lowlevel/xc/xc.c b/tools/python/xen/lowlevel/xc/xc.c
index 9feb12ae2b16..ebb97ec6b90c 100644
--- a/tools/python/xen/lowlevel/xc/xc.c
+++ b/tools/python/xen/lowlevel/xc/xc.c
@@ -807,7 +807,7 @@ static PyObject *pyxc_readconsolering(XcObject *self,
                                       PyObject *kwds)
 {
     unsigned int clear = 0, index = 0, incremental = 0;
-    unsigned int count = 16384 + 1, size = count;
+    unsigned int count = 65536 + 1, size = count;
     char        *str, *ptr;
     PyObject    *obj;
     int          ret;
diff --git a/xen/arch/x86/hvm/vmx/vmcs.c b/xen/arch/x86/hvm/vmx/vmcs.c
index 9b6dc51f36ab..863afdeb98eb 100644
--- a/xen/arch/x86/hvm/vmx/vmcs.c
+++ b/xen/arch/x86/hvm/vmx/vmcs.c
@@ -38,7 +38,7 @@ boolean_param("vpid", opt_vpid_enabled);
 static bool __read_mostly opt_unrestricted_guest_enabled = true;
 boolean_param("unrestricted_guest", opt_unrestricted_guest_enabled);
 
-static bool __read_mostly opt_apicv_enabled = true;
+static bool __read_mostly opt_apicv_enabled;
 boolean_param("apicv", opt_apicv_enabled);
 
 /*
@@ -60,7 +60,7 @@ integer_param("vm-notify-window", vm_notify_window);
 
 static bool __read_mostly opt_ept_pml = true;
 static s8 __read_mostly opt_ept_ad = -1;
-int8_t __read_mostly opt_ept_exec_sp = -1;
+int8_t __read_mostly opt_ept_exec_sp = 1; /* Default to fast. */
 
 static int __init cf_check parse_ept_param(const char *s)
 {
diff --git a/xen/arch/x86/mm.c b/xen/arch/x86/mm.c
index d65cf9fa714d..34c6cf3df627 100644
--- a/xen/arch/x86/mm.c
+++ b/xen/arch/x86/mm.c
@@ -169,7 +169,7 @@ static uint32_t base_disallow_mask;
       is_pv_domain(d)) ?                                        \
      L1_DISALLOW_MASK : (L1_DISALLOW_MASK & ~PAGE_CACHE_ATTRS))
 
-static s8 __read_mostly opt_mmio_relax;
+static int8_t __ro_after_init opt_mmio_relax = 1;
 
 static int __init cf_check parse_mmio_relax(const char *s)
 {
@@ -655,7 +655,7 @@ static void dec_linear_uses(struct page_info *pg)
  *     frame if it is mapped by a different root table. This is sufficient and
  *     also necessary to allow validation of a root table mapping itself.
  */
-static bool __read_mostly opt_pv_linear_pt = true;
+static bool __read_mostly opt_pv_linear_pt = false;
 boolean_param("pv-linear-pt", opt_pv_linear_pt);
 
 #define define_get_linear_pagetable(level)                                  \
diff --git a/xen/arch/x86/nmi.c b/xen/arch/x86/nmi.c
index 9793fa23168d..60f71359f5f8 100644
--- a/xen/arch/x86/nmi.c
+++ b/xen/arch/x86/nmi.c
@@ -46,7 +46,7 @@ static DEFINE_PER_CPU(unsigned int, nmi_timer_ticks);
 bool __initdata opt_watchdog;
 
 /* watchdog_force: If true, process unknown NMIs when running the watchdog. */
-bool watchdog_force;
+bool watchdog_force = true;
 
 static int __init cf_check parse_watchdog(const char *s)
 {
diff --git a/xen/arch/x86/time.c b/xen/arch/x86/time.c
index c25fdf70abb3..2faf02ac1a02 100644
--- a/xen/arch/x86/time.c
+++ b/xen/arch/x86/time.c
@@ -1250,7 +1250,7 @@ static unsigned long get_cmos_time(void)
     unsigned long flags;
     struct rtc_time rtc;
     unsigned int seconds = 60;
-    static bool __read_mostly cmos_rtc_probe;
+    static bool __read_mostly cmos_rtc_probe = true;
     boolean_param("cmos-rtc-probe", cmos_rtc_probe);
 
     if ( likely(!(acpi_gbl_FADT.boot_flags & ACPI_FADT_NO_CMOS_RTC)) )
diff --git a/xen/arch/x86/traps.c b/xen/arch/x86/traps.c
index ae573ee4c044..a6b7265f8b5a 100644
--- a/xen/arch/x86/traps.c
+++ b/xen/arch/x86/traps.c
@@ -81,11 +81,7 @@
  *  dom0:   The NMI is virtualised to DOM0.
  *  ignore: The NMI error is cleared and ignored.
  */
-#ifdef NDEBUG
-static char __read_mostly opt_nmi[10] = "dom0";
-#else
 static char __read_mostly opt_nmi[10] = "fatal";
-#endif
 string_param("nmi", opt_nmi);
 
 DEFINE_PER_CPU(uint64_t, efer);
diff --git a/xen/common/domain.c b/xen/common/domain.c
index fb262dcec919..34062e24dfb7 100644
--- a/xen/common/domain.c
+++ b/xen/common/domain.c
@@ -353,7 +353,7 @@ static int late_hwdom_init(struct domain *d)
 #ifdef CONFIG_HAS_PIRQ
 
 static unsigned int __read_mostly extra_hwdom_irqs;
-#define DEFAULT_EXTRA_DOMU_IRQS 32U
+#define DEFAULT_EXTRA_DOMU_IRQS 64U
 static unsigned int __read_mostly extra_domU_irqs = DEFAULT_EXTRA_DOMU_IRQS;
 
 static int __init cf_check parse_extra_guest_irqs(const char *s)
diff --git a/xen/common/efi/boot.c b/xen/common/efi/boot.c
index 0aa54f6c852f..3ac6cd522b0e 100644
--- a/xen/common/efi/boot.c
+++ b/xen/common/efi/boot.c
@@ -1551,7 +1551,7 @@ void EFIAPI __init noreturn efi_start(EFI_HANDLE ImageHandle,
 
 #include <asm/spec_ctrl.h>
 
-static bool __initdata efi_map_uc;
+static bool __initdata efi_map_uc = true;
 
 static int __init cf_check parse_efi_param(const char *s)
 {
diff --git a/xen/common/page_alloc.c b/xen/common/page_alloc.c
index 57329d0eb51e..97bb3626065e 100644
--- a/xen/common/page_alloc.c
+++ b/xen/common/page_alloc.c
@@ -230,7 +230,7 @@ static unsigned long __initdata opt_bootscrub_chunk = MB(128);
 size_param("bootscrub_chunk", opt_bootscrub_chunk);
 
  /* scrub-domheap -> Domheap pages are scrubbed when freed */
-static bool __read_mostly opt_scrub_domheap;
+static bool __read_mostly opt_scrub_domheap = true;
 boolean_param("scrub-domheap", opt_scrub_domheap);
 
 #ifdef CONFIG_SCRUB_DEBUG
diff --git a/xen/drivers/char/console.c b/xen/drivers/char/console.c
index 3a3a97bcbe3a..386f8ec1dfaf 100644
--- a/xen/drivers/char/console.c
+++ b/xen/drivers/char/console.c
@@ -76,7 +76,7 @@ enum con_timestamp_mode
     TSM_RAW,           /* [XXXXXXXXXXXXXXXX] */
 };
 
-static enum con_timestamp_mode __read_mostly opt_con_timestamp_mode = TSM_NONE;
+static enum con_timestamp_mode __read_mostly opt_con_timestamp_mode = TSM_BOOT;
 
 #ifdef CONFIG_HYPFS
 static const char con_timestamp_mode_2_string[][7] = {
@@ -101,11 +101,11 @@ static int cf_check parse_console_timestamps(const char *s);
 custom_runtime_param("console_timestamps", parse_console_timestamps,
                      con_timestamp_mode_upd);
 
-/* conring_size: allows a large console ring than default (16kB). */
+/* conring_size: allows a large console ring than default (64kB). */
 static uint32_t __initdata opt_conring_size;
 size_param("conring_size", opt_conring_size);
 
-#define _CONRING_SIZE 16384
+#define _CONRING_SIZE KB(64)
 #define CONRING_IDX_MASK(i) ((i)&(conring_size-1))
 static char __initdata _conring[_CONRING_SIZE];
 static char *__read_mostly conring = _conring;
