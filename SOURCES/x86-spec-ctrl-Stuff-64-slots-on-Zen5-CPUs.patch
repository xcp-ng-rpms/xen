From 16a412a36df5ff7703984f09871acda223dccb43 Mon Sep 17 00:00:00 2001
From: Andrew Cooper <andrew.cooper3@citrix.com>
Date: Mon, 25 Nov 2024 14:22:54 +0000
Subject: x86/spec-ctrl: Stuff 64 slots on Zen5 CPUs

This is a stopgap until until AutoIBRS can be made to work.

Signed-off-by: Andrew Cooper <andrew.cooper3@citrix.com>

diff --git a/xen/arch/x86/hvm/svm/entry.S b/xen/arch/x86/hvm/svm/entry.S
index 8779856fb5a6..133eb331f3cf 100644
--- a/xen/arch/x86/hvm/svm/entry.S
+++ b/xen/arch/x86/hvm/svm/entry.S
@@ -123,7 +123,8 @@ __UNLIKELY_END(nsvm_hap)
          * entries.  This is not needed on Zen4 and later, when AutoIBRS is in
          * use.
          */
-        ALTERNATIVE "", DO_OVERWRITE_RSB, X86_FEATURE_SC_RSB_HVM
+        ALTERNATIVE_2 "", DO_OVERWRITE_RSB, X86_FEATURE_SC_RSB_HVM, \
+                          STR(DO_OVERWRITE_RSB slots=64), X86_SPEC_RSB64_HVM
 
         /*
          * Restore Xen's MSR_SPEC_CTRL setting, making indirect CALLs/JMPs
diff --git a/xen/arch/x86/include/asm/cpufeatures.h b/xen/arch/x86/include/asm/cpufeatures.h
index ba3df174b76e..e0de3410eae3 100644
--- a/xen/arch/x86/include/asm/cpufeatures.h
+++ b/xen/arch/x86/include/asm/cpufeatures.h
@@ -60,5 +60,7 @@ XEN_CPUFEATURE(IBPB_ENTRY_HVM,    X86_SYNTH(29)) /* MSR_PRED_CMD used by Xen for
 #define X86_SPEC_BHB_LOOPS        X86_BUG(20) /* Use clear_bhb_loops for BHI mitigation.*/
 #define X86_SPEC_BHB_LOOPS_LONG   X86_BUG(21) /* Upgrade clear_bhb_loops to the "long" sequence. */
 
+#define X86_SPEC_RSB64_HVM        X86_BUG(31) /* Use 64-slot RSB-stuffing loop. */
+
 /* Total number of capability words, inc synth and bug words. */
 #define NCAPINTS (FSCAPINTS + X86_NR_SYNTH + X86_NR_BUG) /* N 32-bit words worth of info */
diff --git a/xen/arch/x86/include/asm/spec_ctrl_asm.h b/xen/arch/x86/include/asm/spec_ctrl_asm.h
index 1d7c4f4a688d..629ab7dc9e7b 100644
--- a/xen/arch/x86/include/asm/spec_ctrl_asm.h
+++ b/xen/arch/x86/include/asm/spec_ctrl_asm.h
@@ -104,7 +104,7 @@
 .L\@_skip:
 .endm
 
-.macro DO_OVERWRITE_RSB tmp=rax xu
+.macro DO_OVERWRITE_RSB tmp=rax, slots=32, xu
 /*
  * Requires nothing
  * Clobbers \tmp (%rax by default), %rcx
@@ -125,7 +125,7 @@
  * b) the two movs are shorter to encode than `add $32*8, %rsp`, and c) can be
  * optimised with mov-elimination in modern cores.
  */
-    mov $16, %ecx                   /* 16 iterations, two calls per loop */
+    mov $\slots / 2, %ecx           /* two calls per loop */
     mov %rsp, %\tmp                 /* Store the current %rsp */
 
 .L\@_fill_rsb_loop\xu:
@@ -146,7 +146,7 @@
     rdsspd %ecx
     cmp $1, %ecx
     je .L\@_shstk_done\xu
-    mov $64, %ecx                   /* 64 * 4 bytes, given incsspd */
+    mov $\slots * 2, %ecx           /* double, given incsspd */
     incsspd %ecx                    /* Restore old SSP */
 .L\@_shstk_done\xu:
 #endif
diff --git a/xen/arch/x86/spec_ctrl.c b/xen/arch/x86/spec_ctrl.c
index bedc86ad5600..1a2bdc63274b 100644
--- a/xen/arch/x86/spec_ctrl.c
+++ b/xen/arch/x86/spec_ctrl.c
@@ -2064,6 +2064,10 @@ void __init init_speculation_mitigations(void)
     {
         setup_force_cpu_cap(X86_FEATURE_SC_RSB_HVM);
 
+        if ( (boot_cpu_data.x86_vendor & X86_VENDOR_AMD) &&
+             boot_cpu_data.x86 >= 0x1a )
+            setup_force_cpu_cap(X86_SPEC_RSB64_HVM);
+
         /*
          * For SVM, Xen's RSB safety actions are performed before STGI, so
          * behave atomically with respect to IST sources.
